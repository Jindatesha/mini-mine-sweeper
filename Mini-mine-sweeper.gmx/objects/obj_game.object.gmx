<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//randomize our seed (for true random values every start of game)
randomize();



enum UNDERTILE_TYPE
{    
    BLANK,
    ONE,
    TWO,
    THREE,
    FOUR,
    FIVE,
    SIX,
    SEVEN,
    EIGHT,
    BOMB
}

enum OVERTILE_TYPE
{
    BLANK,
    FLAGGED,
    REVEALED
}





number_colors_array[0] = make_colour_rgb(25, 168, 173);
number_colors_array[1] = make_colour_rgb(25, 133, 173);
number_colors_array[2] = make_colour_rgb(36, 103, 159);
number_colors_array[3] = make_colour_rgb(36, 43, 159);
number_colors_array[4] = make_colour_rgb(108, 35, 135);
number_colors_array[5] = make_colour_rgb(155, 28, 143);
number_colors_array[6] = make_colour_rgb(159, 36, 66);
number_colors_array[7] = make_colour_rgb(174, 21, 21);

//set font and alignment
draw_set_font(font_pricedown);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

//initialize globals
undertile_grid = ds_grid_create(0,0);
overtile_grid = ds_grid_create(0,0);
tile_size = 64; //64x64
board_w = 0;
board_h = 0;
room_to_swap_id = room_play_2;
window_scale = 1;




//initialize locals
font_id = font_pricedown;
font_embedded_padding_x = 0;
font_embedded_padding_y = -4;


scr_reset_match_variables();


board_sizes_grid = ds_grid_create(2,0);
scr_add_board_size(5,5);
scr_add_board_size(8,7);
scr_add_board_size(12,6);


//setup game
scr_new_game(5,5);




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

//if we click on one of the boards tiles

var current_mouse_over_in_tiles_x = mouse_x div tile_size;
var current_mouse_over_in_tiles_y = mouse_y div tile_size;

//left pressed = 1; right pressed = -1;  both/neither pressed = 0;
var mouse_button_pressed = mouse_check_button_pressed(mb_left) - mouse_check_button_pressed(mb_right);


if (can_reveal_tiles == true and mouse_button_pressed != 0)
{
    //is it one of the boards tiles
    if (current_mouse_over_in_tiles_y &gt; 0)
    {
        var tx = current_mouse_over_in_tiles_x;
        var ty = current_mouse_over_in_tiles_y - 1;
        var this_overtile_type = ds_grid_get(overtile_grid,tx,ty);
        
        //if this boards OVERTILE wasnt revealed
        if (this_overtile_type != OVERTILE_TYPE.REVEALED)
        {
            //left mouse was pressed
            if (mouse_button_pressed == 1)
            {
                //reveal tile and see what happens
                scr_reveal_undertile(tx,ty);
            }
            else
            {
                //right mouse was pressed
                
                if (this_overtile_type == OVERTILE_TYPE.FLAGGED)
                {
                    //un-flag that tile
                    ds_grid_set(overtile_grid,tx,ty,OVERTILE_TYPE.BLANK);
                }
                else
                {   
                    //flag that tile
                    ds_grid_set(overtile_grid,tx,ty,OVERTILE_TYPE.FLAGGED);
                    
                    //now check to see if we have revealed all of the tiles
                    scr_check_if_game_over();  
                }          
            }
        }
    }
}










</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room == room_play_1 room_to_swap_id = room_play_2 else room_to_swap_id = room_play_1;

var new_room_w = board_w * tile_size * window_scale;
var new_room_h = board_h * tile_size * window_scale;
window_set_size(new_room_w,new_room_h);
surface_resize(application_surface,new_room_w,new_room_h);

view_wport[0] = new_room_w;
view_hport[0] = new_room_h;
view_wview[0] = new_room_w;
view_hview[0] = new_room_h;

if (has_triggered_bomb_on_first_tile == true)
{
    is_first_tile_clicked = true;
    has_triggered_bomb_on_first_tile = false;
    scr_reveal_undertile(triggered_bomb_pos[0],triggered_bomb_pos[1]);
}
else
{
    scr_reset_match_variables();
}

draw_set_color(c_white);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw background
draw_sprite_tiled(spr_background,0,0,0);

//draw the top HUD
//backing
draw_sprite_stretched(spr_ui_backing,0,0,0,room_width,tile_size);

//timer backing
var timer_backing_x = tile_size * 0.5;
var timer_backing_y = round(tile_size * 0.5);
draw_set_halign(fa_right);
draw_sprite(spr_ui_timer_backing,0,timer_backing_x,timer_backing_y);

if (timer_paused == false)
{
    total_time += 1/room_speed;
}
var h_padding = 5;
draw_text(timer_backing_x + sprite_get_width(spr_ui_timer_backing) - h_padding + font_embedded_padding_x,timer_backing_y + font_embedded_padding_y,string(floor(total_time)));

//score backing
var score_backing_x = tile_size * 2.5;
draw_sprite(spr_ui_score_backing,0,score_backing_x,timer_backing_y);

draw_text(score_backing_x + sprite_get_width(spr_ui_score_backing) - h_padding + font_embedded_padding_x,timer_backing_y + font_embedded_padding_y,string(floor(total_score)));

//settings button
var settings_button_backing_x = room_width - (tile_size * .6);
draw_sprite(spr_ui_settings_button,0,settings_button_backing_x,timer_backing_y);

//personal preference to have these two nested
if (mouse_check_button_pressed(mb_left))
{
    var button_w = sprite_get_width(spr_ui_settings_button);
    var button_h = sprite_get_height(spr_ui_settings_button);
    var button_x = settings_button_backing_x - (button_w/2);// /2 because origin is in center
    var button_y = timer_backing_y - (button_h/2);
    
    if (mouse_x &gt;= button_x and mouse_x &lt; button_x + button_w and mouse_y &gt;= button_y and mouse_y &lt; button_y + button_h)
    {
        //toggle that button
        dropdown_active = !dropdown_active;
        
        //toggle ability to change tiles
        can_reveal_tiles = !can_reveal_tiles;
        
        //play sound effect
        var snd = snd_ui_click;
        audio_play_sound(snd,0,false);
    }
}





//draw the board
draw_set_halign(fa_center);
for(var tx = 0; tx &lt; board_w; tx += 1;)
{
    for(var ty = 0; ty &lt; board_h; ty += 1;)
    {
        var top_tile_type = ds_grid_get(overtile_grid,tx,ty);
        if (top_tile_type != OVERTILE_TYPE.REVEALED)
        {
            draw_sprite(spr_tile_block,0,tx * tile_size,ty * tile_size + (1 * tile_size));
            
            //if tile was flagged, draw a flag symbol on top
            if (top_tile_type == OVERTILE_TYPE.FLAGGED)
            {
               draw_sprite(spr_flag,0,tx * tile_size + (tile_size/2),ty * tile_size + (1 * tile_size) + (tile_size/2)); 
            }
        }
        else
        {
            var bot_tile_type = ds_grid_get(undertile_grid,tx,ty);
            if (bot_tile_type == UNDERTILE_TYPE.BOMB)
            {
                draw_sprite(spr_bomb,0,tx * tile_size,ty * tile_size + (1 * tile_size));
            }
            else
            {
                if (bot_tile_type != UNDERTILE_TYPE.BLANK)
                {
                    draw_set_color(number_colors_array[bot_tile_type]);
                    draw_text(tx * tile_size + round(tile_size/2),ty * tile_size + round(tile_size/2) + (1 * tile_size), string(bot_tile_type));
                    draw_set_color(c_white);
                }
             }
            
        }
    }
}







//menu dropdown

if (dropdown_active == true)
{
   
    
    //draw dropdown backing
    var dropdown_w = tile_size * 3;
    var dropdown_h = tile_size * 3;
    var dropdown_x = board_w * tile_size - dropdown_w;
    var dropdown_y = tile_size;
    draw_sprite_stretched(spr_ui_dropdown_backing,0,dropdown_x,dropdown_y,dropdown_w,dropdown_h);

    
    //draw_buttons 
    var button_w = sprite_get_width(spr_ui_dropdown_button_backing); 
    var button_h = sprite_get_height(spr_ui_dropdown_button_backing);
    
    var total_different_board_sizes = ds_grid_height(board_sizes_grid);
    
    var starting_cut = dropdown_h / (total_different_board_sizes + 1);
    var remaining_backing_amount = dropdown_h - (button_h * total_different_board_sizes);
    var remaining_amount_divided = remaining_backing_amount/(total_different_board_sizes + 1);
    
    draw_set_halign(fa_center);
    
    for(var i = 0; i &lt; total_different_board_sizes; i += 1;)
    {
        //button backing 
        var this_button_x = dropdown_x + (dropdown_w/2);
        var this_button_y = round(dropdown_y + (((starting_cut + remaining_amount_divided) * i) - remaining_amount_divided + starting_cut)); //the "+1" is for padding
        var this_button_scale = 1;
         //board dimensions
        var this_buttons_board_w = ds_grid_get(board_sizes_grid,0,i);
        var this_buttons_board_h = ds_grid_get(board_sizes_grid,1,i);
        
        //if mouse is hovered over this button
        if (mouse_x &gt;= this_button_x - (button_w/2) and mouse_x &lt;= this_button_x + (button_w/2) and mouse_y &gt;= this_button_y - (button_h/2) and mouse_y &lt;= this_button_y + (button_h/2))
        {
            this_button_scale = 1.2;
            
            if (mouse_check_button_pressed(mb_left))
            {
                //play sound effect
                var snd = snd_ui_click;
                audio_play_sound(snd,0,false);
            
                //start new board
                scr_new_game(this_buttons_board_w,this_buttons_board_h);              
            }
        }
        
        
        draw_sprite_ext(spr_ui_dropdown_button_backing,0,this_button_x,this_button_y,this_button_scale,this_button_scale,0,c_white,1);
        
       
        draw_text_transformed(this_button_x,this_button_y + font_embedded_padding_y,string(this_buttons_board_w) + " x " + string(this_buttons_board_h),this_button_scale,this_button_scale,0);
    }


}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
